import math

# Define constants for players
X = 'X'
O = 'O'
EMPTY = ' '

def minimax(board, depth, maximizing_player):
    # Check if the game is over or depth limit is reached
    if game_over(board) or depth == 0:
        return evaluate(board)

    if maximizing_player:
        max_eval = -math.inf
        for move in get_possible_moves(board):
            new_board = make_move(board, move, X)
            eval_val = minimax(new_board, depth - 1, False)
            max_eval = max(max_eval, eval_val)
        return max_eval
    else:
        min_eval = math.inf
        for move in get_possible_moves(board):
            new_board = make_move(board, move, O)
            eval_val = minimax(new_board, depth - 1, True)
            min_eval = min(min_eval, eval_val)
        return min_eval

def game_over(board):
    # Check for a winner or a full board
    return winner(board) or board.count(EMPTY) == 0

def winner(board):
    # Check rows, columns, and diagonals for a winner
    for i in range(3):
        if board[i] == board[i + 3] == board[i + 6] != EMPTY:
            return board[i]
        if board[i * 3] == board[i * 3 + 1] == board[i * 3 + 2] != EMPTY:
            return board[i * 3]
    if board[0] == board[4] == board[8] != EMPTY:
        return board[0]
    if board[2] == board[4] == board[6] != EMPTY:
        return board[2]
    return None

def evaluate(board):
    # Evaluate the board state
    winner_player = winner(board)
    if winner_player == X:
        return 1
    elif winner_player == O:
        return -1
    else:
        return 0

def get_possible_moves(board):
    # Get possible moves
    return [i for i, val in enumerate(board) if val == EMPTY]

def make_move(board, move, player):
    # Make a move
    new_board = board.copy()
    new_board[move] = player
    return new_board

# Example usage
if __name__ == "__main__":
    board = [
        EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, EMPTY
    ]

    best_move = None
    best_move_value = -math.inf
    for move in get_possible_moves(board):
        new_board = make_move(board, move, X)
        move_value = minimax(new_board, 5, False)
        if move_value > best_move_value:
            best_move = move
            best_move_value = move_value

    print(f"Best Move: {best_move}")
